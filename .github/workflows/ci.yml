name: CI
on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
        go: ['1.19', '1.20']
        build-tags:
          - ''
          - 'jsoniter'
          - 'go_json'
          # Check conflicting build tags
          - 'jsoniter,go_json'
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Test & generate coverage report
        run: >-
          go test -v -race ./...
          -tags="${{ matrix.build-tags }}"
          -coverpkg=./...
          -covermode=atomic
          -coverprofile=cover.out
      - name: Upload coverage artifact
        # Upload coverage only once (ubuntu-latest + go 1.20 + no build tags)
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.20' && matrix.build-tags == ''
        uses: actions/upload-artifact@v3
        with:
          name: coverage_report
          path: cover.out
          if-no-files-found: error
          retention-days: 1

  coverage:
    if: github.actor != 'dependabot[bot]'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download coverage artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage_report
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          fail_ci_if_error: true
